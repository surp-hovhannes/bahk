# Generated by Django 4.2.11 on 2025-09-27 08:22

from django.db import migrations, models
import django.db.models.deletion
import parler.fields
import parler.models


class Migration(migrations.Migration):

    dependencies = [
        ('events', '0008_make_checklist_used_target_optional'),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.DeleteModel(name='UserActivityFeed'),
                migrations.CreateModel(
                    name='UserActivityFeed',
                    fields=[
                        ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('activity_type', models.CharField(choices=[('event', 'Event'), ('fast_start', 'Fast Started'), ('fast_join', 'Joined Fast'), ('fast_leave', 'Left Fast'), ('devotional_available', 'Devotional Available'), ('milestone', 'Milestone Reached'), ('fast_reminder', 'Fast Reminder'), ('devotional_reminder', 'Devotional Reminder'), ('user_account_created', 'User Account Created'), ('article_published', 'Article Published'), ('recipe_published', 'Recipe Published'), ('video_published', 'Video Published'), ('announcement', 'Announcement')], help_text='Type of activity', max_length=50)),
                        ('title', models.CharField(help_text='Activity title', max_length=255)),
                        ('description', models.TextField(blank=True, help_text='Activity description')),
                        ('is_read', models.BooleanField(default=False, help_text='Whether the user has seen this activity')),
                        ('read_at', models.DateTimeField(blank=True, help_text='When the user marked this as read', null=True)),
                        ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='When this activity was created')),
                        ('data', models.JSONField(blank=True, default=dict, help_text='Additional data related to the activity')),
                        ('object_id', models.PositiveIntegerField(blank=True, help_text='ID of the target object', null=True)),
                        ('content_type', models.ForeignKey(blank=True, help_text='Content type of the target object', null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                        ('event', models.ForeignKey(blank=True, help_text='Related event (if this is event-based)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='feed_items', to='events.event')),
                        ('user', models.ForeignKey(help_text='User who this activity is for', on_delete=django.db.models.deletion.CASCADE, related_name='activity_feed_items', to='auth.user')),
                    ],
                    options={
                        'ordering': ['-created_at'],
                        'indexes': [
                            models.Index(fields=['user', 'is_read'], name='uaf_user_is_read_idx'),
                            models.Index(fields=['user', 'activity_type'], name='uaf_user_activity_idx'),
                            models.Index(fields=['user', 'created_at'], name='uaf_user_created_idx'),
                            models.Index(fields=['created_at', 'is_read'], name='uaf_created_is_read_idx'),
                            models.Index(fields=['activity_type', 'created_at'], name='uaf_activity_created_idx'),
                        ],
                    },
                    bases=(parler.models.TranslatableModel, models.Model),
                ),
                migrations.DeleteModel(name='Announcement'),
                migrations.CreateModel(
                    name='Announcement',
                    fields=[
                        ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                        ('url', models.URLField(blank=True, help_text='Optional URL for more information', max_length=2048)),
                        ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', help_text='Publication status', max_length=20)),
                        ('publish_at', models.DateTimeField(default=None, help_text='When to publish the announcement')),
                        ('expires_at', models.DateTimeField(blank=True, help_text='When the announcement expires (optional)', null=True)),
                        ('created_at', models.DateTimeField(auto_now_add=True)),
                        ('updated_at', models.DateTimeField(auto_now=True)),
                        ('total_recipients', models.PositiveIntegerField(default=0, help_text='Total number of users who received this announcement')),
                        ('title', models.CharField(help_text='Announcement title', max_length=255)),
                        ('description', models.TextField(help_text='Short description of the announcement')),
                        ('created_by', models.ForeignKey(blank=True, help_text='User who created this announcement', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_announcements', to='auth.user')),
                        ('target_all_users', models.BooleanField(default=True, help_text='Send to all users')),
                    ],
                    options={
                        'ordering': ['-publish_at'],
                        'indexes': [
                            models.Index(fields=['status', 'publish_at'], name='ann_status_publish_idx'),
                            models.Index(fields=['expires_at'], name='ann_expires_idx'),
                            models.Index(fields=['target_all_users'], name='ann_target_all_idx'),
                        ],
                    },
                    bases=(parler.models.TranslatableModel, models.Model),
                ),
            ]
        ),
        migrations.CreateModel(
            name='UserActivityFeedTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('title', models.CharField(help_text='Activity title', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Activity description')),
                ('master', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='events.useractivityfeed')),
            ],
            options={
                'verbose_name': 'user activity feed Translation',
                'db_table': 'events_useractivityfeed_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AnnouncementTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('title', models.CharField(help_text='Announcement title', max_length=255)),
                ('description', models.TextField(help_text='Short description of the announcement')),
                ('master', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='events.announcement')),
            ],
            options={
                'verbose_name': 'announcement Translation',
                'db_table': 'events_announcement_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
    ]
